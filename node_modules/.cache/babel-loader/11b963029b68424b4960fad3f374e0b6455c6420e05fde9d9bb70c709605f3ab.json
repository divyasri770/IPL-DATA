{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\divya\\\\OneDrive\\\\Pictures\\\\Desktop\\\\IPL\\\\ipl-coverage\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import './Chatbot.css';\n// const Chatbot = () => {\n//   const [messages, setMessages] = useState([]);\n//   const [input, setInput] = useState('');\n\n//   const handleSend = () => {\n//     if (input.trim()) {\n//       const newMessage = { text: input, user: 'user' };\n//       setMessages([...messages, newMessage]);\n\n//       // Clear the input\n//       setInput('');\n\n//       // Here you would call your API to get a response from the bot\n//       // For now, we'll just simulate a response\n//       setTimeout(() => {\n//         const botMessage = { text: `Echo: ${input}`, user: 'bot' };\n//         setMessages((prevMessages) => [...prevMessages, botMessage]);\n//       }, 1000);\n//     }\n//   };\n\n//   return (\n//     <div className=\"chatbot-container\">\n//       <div className=\"chat-window\">\n//         <div className=\"chat-messages\">\n//           {messages.map((message, index) => (\n//             <div key={index} className={`chat-message ${message.user}`}>\n//               <span>{message.text}</span>\n//             </div>\n//           ))}\n//         </div>\n//         <div className=\"chat-input\">\n//           <input\n//             type=\"text\"\n//             value={input}\n//             onChange={(e) => setInput(e.target.value)}\n//             placeholder=\"Type a message...\"\n//           />\n\n//           <button onClick={handleSend}>Send</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Chatbot;\nimport React, { useState } from 'react';\nimport './Chatbot.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const handleSend = async () => {\n    if (input.trim()) {\n      const newMessage = {\n        text: input,\n        user: 'user'\n      };\n      setMessages([...messages, newMessage]);\n\n      // Clear the input\n      setInput('');\n      try {\n        const result = await axios.post('https://0d95-34-87-76-120.ngrok-free.app/query', {\n          query: input\n        });\n        const botMessage = {\n          text: result.data.answer,\n          user: 'bot'\n        };\n        setMessages(prevMessages => [...prevMessages, botMessage]);\n      } catch (error) {\n        console.error('Error querying the backend:', error);\n        const errorMessage = {\n          text: 'Error querying the backend. Please check the console for more details.',\n          user: 'bot'\n        };\n        setMessages(prevMessages => [...prevMessages, errorMessage]);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-message ${message.user}`,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSend,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"HDAtGPGcvWga1zf1TBXg51T+tsc=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","handleSend","trim","newMessage","text","user","result","post","query","botMessage","data","answer","prevMessages","error","console","errorMessage","className","children","map","message","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/divya/OneDrive/Pictures/Desktop/IPL/ipl-coverage/src/components/Chatbot.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import './Chatbot.css';\r\n// const Chatbot = () => {\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [input, setInput] = useState('');\r\n\r\n//   const handleSend = () => {\r\n//     if (input.trim()) {\r\n//       const newMessage = { text: input, user: 'user' };\r\n//       setMessages([...messages, newMessage]);\r\n\r\n//       // Clear the input\r\n//       setInput('');\r\n\r\n//       // Here you would call your API to get a response from the bot\r\n//       // For now, we'll just simulate a response\r\n//       setTimeout(() => {\r\n//         const botMessage = { text: `Echo: ${input}`, user: 'bot' };\r\n//         setMessages((prevMessages) => [...prevMessages, botMessage]);\r\n//       }, 1000);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"chatbot-container\">\r\n//       <div className=\"chat-window\">\r\n//         <div className=\"chat-messages\">\r\n//           {messages.map((message, index) => (\r\n//             <div key={index} className={`chat-message ${message.user}`}>\r\n//               <span>{message.text}</span>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//         <div className=\"chat-input\">\r\n//           <input\r\n//             type=\"text\"\r\n//             value={input}\r\n//             onChange={(e) => setInput(e.target.value)}\r\n//             placeholder=\"Type a message...\"\r\n//           />\r\n      \r\n//           <button onClick={handleSend}>Send</button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Chatbot;\r\nimport React, { useState } from 'react';\r\nimport './Chatbot.css';\r\nimport axios from 'axios';\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n\r\n  const handleSend = async () => {\r\n    if (input.trim()) {\r\n      const newMessage = { text: input, user: 'user' };\r\n      setMessages([...messages, newMessage]);\r\n\r\n      // Clear the input\r\n      setInput('');\r\n\r\n      try {\r\n        const result = await axios.post('https://0d95-34-87-76-120.ngrok-free.app/query', { query: input });\r\n        const botMessage = { text: result.data.answer, user: 'bot' };\r\n        setMessages((prevMessages) => [...prevMessages, botMessage]);\r\n      } catch (error) {\r\n        console.error('Error querying the backend:', error);\r\n        const errorMessage = { text: 'Error querying the backend. Please check the console for more details.', user: 'bot' };\r\n        setMessages((prevMessages) => [...prevMessages, errorMessage]);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chat-window\">\r\n        <div className=\"chat-messages\">\r\n          {messages.map((message, index) => (\r\n            <div key={index} className={`chat-message ${message.user}`}>\r\n              <span>{message.text}</span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"chat-input\">\r\n          <input\r\n            type=\"text\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            placeholder=\"Type a message...\"\r\n          />\r\n          <button onClick={handleSend}>Send</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}