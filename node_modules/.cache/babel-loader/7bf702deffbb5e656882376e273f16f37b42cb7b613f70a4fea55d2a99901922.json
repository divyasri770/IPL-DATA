{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\divya\\\\OneDrive\\\\Pictures\\\\Desktop\\\\IPL\\\\ipl-coverage\\\\src\\\\components\\\\PlayerReports.js\";\nimport React, { Component } from 'react';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Chatbot extends Component {\n  constructor(props) {\n    super(props);\n    this.handleInputChange = event => {\n      this.setState({\n        userInput: event.target.value\n      });\n    };\n    this.handleSend = () => {\n      const {\n        userInput,\n        messages\n      } = this.state;\n      if (userInput.trim() === '') return;\n\n      // Add the user's message to the chat\n      this.setState({\n        messages: [...messages, {\n          sender: 'user',\n          text: userInput\n        }],\n        userInput: ''\n      });\n\n      // Simulate a response from the chatbot\n      // Here you will later integrate the RAG implementation\n      setTimeout(() => {\n        const botResponse = `Bot response to: \"${userInput}\"`;\n        this.setState(prevState => ({\n          messages: [...prevState.messages, {\n            sender: 'bot',\n            text: botResponse\n          }]\n        }));\n      }, 1000);\n    };\n    this.state = {\n      messages: [],\n      userInput: ''\n    };\n  }\n  render() {\n    const {\n      messages,\n      userInput\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-window\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${message.sender}`,\n            children: message.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: userInput,\n            onChange: this.handleInputChange,\n            placeholder: \"Type your message here...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handleSend,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Chatbot;","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","Chatbot","constructor","props","handleInputChange","event","setState","userInput","target","value","handleSend","messages","state","trim","sender","text","setTimeout","botResponse","prevState","render","className","children","map","message","index","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick"],"sources":["C:/Users/divya/OneDrive/Pictures/Desktop/IPL/ipl-coverage/src/components/PlayerReports.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport './Chatbot.css';\r\n\r\nclass Chatbot extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      messages: [],\r\n      userInput: ''\r\n    };\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    this.setState({ userInput: event.target.value });\r\n  }\r\n\r\n  handleSend = () => {\r\n    const { userInput, messages } = this.state;\r\n    if (userInput.trim() === '') return;\r\n\r\n    // Add the user's message to the chat\r\n    this.setState({\r\n      messages: [...messages, { sender: 'user', text: userInput }],\r\n      userInput: ''\r\n    });\r\n\r\n    // Simulate a response from the chatbot\r\n    // Here you will later integrate the RAG implementation\r\n    setTimeout(() => {\r\n      const botResponse = `Bot response to: \"${userInput}\"`;\r\n      this.setState((prevState) => ({\r\n        messages: [...prevState.messages, { sender: 'bot', text: botResponse }]\r\n      }));\r\n    }, 1000);\r\n  }\r\n\r\n  render() {\r\n    const { messages, userInput } = this.state;\r\n\r\n    return (\r\n      <div className=\"chatbot-container\">\r\n        <div className=\"chat-window\">\r\n          <div className=\"messages\">\r\n            {messages.map((message, index) => (\r\n              <div key={index} className={`message ${message.sender}`}>\r\n                {message.text}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"input-container\">\r\n            <input\r\n              type=\"text\"\r\n              value={userInput}\r\n              onChange={this.handleInputChange}\r\n              placeholder=\"Type your message here...\"\r\n            />\r\n            <button onClick={this.handleSend}>Send</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chatbot;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}